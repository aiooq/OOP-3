'''3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. 
    Проверить работу исключения на реальном примере. 
    Необходимо запрашивать у пользователя данные и заполнять список. 
    Класс-исключение должен контролировать типы данных элементов списка.
        Примечание: длина списка не фиксирована. 
    Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”. 
    При этом скрипт завершается, сформированный список выводится на экран.
        Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. 
    При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число. 
    Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. 
    При этом работа скрипта не должна завершаться.'''

import sys
from os.path import dirname
sys.path.append(dirname(dirname(__file__)))
from include.main import Manager as main

class NotNumericError(Exception):
    def __init__(self):
        self.txt="Введено не число, пожалуйста повторите!"
        print(self)

    def __str__(self):
        return self.txt

class Task:
    def __init__(self):
        self.data = list()

    def __call__(self):
        print(__doc__)
        print("".join(["=" for i in range(100)]))
        # для проверки типа на уровне главной функции main в классе Manager необходимо добавить "type":{int,float} в словарь config
        config = (({"in":"Введите только число для списка или stop для завершения: ","out":"Итоговый список {0}", "def":self.main}))
        return config

    def main(self, value, out):
        if(value=="stop"):
            return out.format(self.data)

        try:
            test=float(value)
            self.data.append(value)
        except Exception:
            raise NotNumericError
        finally:
            raise Exception("Repeat")


main()([Task()()])